/****************************************************************
**	OrangeBot Project
*****************************************************************
**        /
**       /
**      /
** ______ \
**         \
**          \
*****************************************************************
**	Project
*****************************************************************
**  Brief
****************************************************************/

/****************************************************************
**	DESCRIPTION
****************************************************************
**
****************************************************************/

/****************************************************************
**	HISTORY VERSION
****************************************************************
**
****************************************************************/

/****************************************************************
**	KNOWN BUGS
****************************************************************
**
****************************************************************/

/****************************************************************
**	TODO
****************************************************************
**
****************************************************************/

/****************************************************************
**	INCLUDES
****************************************************************/

//Standard C Libraries
//#include <cstdio>
//#include <cstdlib>

//Standard C++ libraries
#include <iostream>
//#include <array>
//#include <vector>
//#include <queue>
//#include <string>
//#include <fstream>
//#include <chrono>
//#include <thread>

//OS Libraries
//#define _WIN32_WINNT 0x0500	//Enable GetConsoleWindow
//#include <windows.h>


#include "at_utils.h"
//User Libraries
//Include user log trace
#include "debug.h"

#include "ctrl_pwm.h"


/****************************************************************
**	NAMESPACES
****************************************************************/

//Never use a whole namespace. Use only what you need from it.
using std::cout;
using std::endl;

/****************************************************************
**	DEFINES
****************************************************************/

/****************************************************************
**	MACROS
****************************************************************/

/****************************************************************
**	PROTOTYPES
****************************************************************/

extern bool test_bench( void );

/****************************************************************
**	GLOBAL VARIABILES
****************************************************************/

//User::Dummy my_class;

/****************************************************************
**	FUNCTIONS
****************************************************************/

/****************************************************************************
**	Function
**	main |
****************************************************************************/
//! @return bool |
//! @brief dummy method to copy the code
//! @details verbose description
/***************************************************************************/

int main()
{
	//----------------------------------------------------------------
	//	VARS
	//----------------------------------------------------------------

	//----------------------------------------------------------------
	//	INIT
	//----------------------------------------------------------------

	//Start Debugging. Show function nesting level 0 and above
	DSTART( 0 );
	//Trace Enter main
	DENTER();

	//----------------------------------------------------------------
	//	BODY
	//----------------------------------------------------------------

	cout << "OrangeBot Projects\n";
	//print in the 'debug.log' file. works just like a fully featured printf
	DPRINT("OrangeBot Projects\n");

	test_bench();

	//----------------------------------------------------------------
	//	RETURN
	//----------------------------------------------------------------

	//Trace Return from main
	DRETURN();
	//Stop Debugging
	DSTOP();

    return 0;
}	//end function: main

/****************************************************************************
**	Function
**	test_bench | bool
****************************************************************************/
//! @return bool |
//! @brief test_bench for the code
//! @details verbose description
/***************************************************************************/

bool test_bench( void )
{
	//Trace Enter with arguments
	DENTER();

	//----------------------------------------------------------------
	//	VARS
	//----------------------------------------------------------------

	//counter
	int t, ti, tii;

	bool f_continue;

	int test_vector_length = 5;
	int step_length = 20;
	int16_t test_right[5] = { 0, -100, +100, +50, -10 };
	int16_t test_left[5] = { 0, +100, +100, +50, -10 };

	Orangebot::Ctrl_pwm my_pwm_controller = Orangebot::Ctrl_pwm( 255, 10 );

	//----------------------------------------------------------------
	//	INIT
	//----------------------------------------------------------------



	//----------------------------------------------------------------
	//	BODY
	//----------------------------------------------------------------
	//! @details algorithm:

	f_continue = true;
	t = 0;
	ti = 0;

	while (f_continue)
	{
		DPRINT("t: %3d | ti: %3d\n", t, ti);

		//TARGET
		DPRINT("");
		//For:
		for (tii = 0;tii < NUM_CTRL_PWM;tii++)
		{
			if (tii == 0)
			{
				my_pwm_controller.target(tii) = test_right[t];
			}
			else if (tii == 1)
			{
				my_pwm_controller.target(tii) = test_left[t];
			}
			else
			{
				my_pwm_controller.target(tii) = 0;
			}

			//Print target
			DPRINT_NOTAB(" PWM%1d: %5d |", tii, my_pwm_controller.target(tii));
		} //End for:
		DPRINT_NOTAB("\n");
		DPRINT("");
		//ACTUAL
		//For:
		for (tii = 0;tii < NUM_CTRL_PWM;tii++)
		{
			//Print target
			DPRINT_NOTAB(" PWM%1d: %5d |", tii, my_pwm_controller.pwm(tii));


		} //End for:
		DPRINT_NOTAB("\n");

		my_pwm_controller.update();


		//Next vector
		ti = AT_TOP_INC( ti, step_length-1 );
		//If: rollover
		if (ti == 0)
		{
			//Next input
			t = AT_TOP_INC( t, test_vector_length-1 );
			//If: rollover
			if (t == 0)
			{
				f_continue = false;
			}
		}


	}


	//----------------------------------------------------------------
	//	RETURN
	//----------------------------------------------------------------

	//Trace Return vith return value
	DRETURN();
	return false; //OK
}	//end function: Dummy | bool

/****************************************************************************
**	Function
**	Dummy | bool
****************************************************************************/
//! @param f bool
//! @return bool |
//! @brief dummy method to copy the code
//! @details verbose description
/***************************************************************************/

bool f( bool f )
{
	//----------------------------------------------------------------
	//	VARS
	//----------------------------------------------------------------

	//----------------------------------------------------------------
	//	INIT
	//----------------------------------------------------------------

	//Trace Enter with arguments
	DENTER_ARG("in: %d\n", 0);

	//----------------------------------------------------------------
	//	BODY
	//----------------------------------------------------------------
	//! @details algorithm:

	//----------------------------------------------------------------
	//	RETURN
	//----------------------------------------------------------------

	//Trace Return vith return value
	DRETURN_ARG("out: %d\n", 0);

	return false; //OK
}	//end function: Dummy | bool
